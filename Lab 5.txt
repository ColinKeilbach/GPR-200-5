// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}

float sq(float x) {
    return x * x;
}

//this squares the value 5 times
//2^2     = 4
//4^2     = 16
//16^2    = 256
//256^2   = 65536
//65536^2 = 4294967296
float sq_5(float x) {
    return sq(sq(sq(sq(sq(x)))));
}

//Light structure
struct pointLight {
    vec4 center;
    vec4 color;
    float intensity;
};
//Light constructor
void initLight(out pointLight light, in vec4 center, in vec4 color, in float intensity) {
    light.center = center;
    light.color = color;
    light.intensity = intensity;
}

//Calculates light values
void lightCalc(out float lightingIntensity, in pointLight light, in vec3 normal, in vec3 position, in vec3 viewport) {
    //This gets the vector direction from the light to the point on the sphere surface
    vec3 direction = vec3(position.x - light.center.x, position.y - light.center.y, position.z - light.center.z);
	
    //Calculate diffuse light
    float dist = sqrt(sq(direction.x) + sq(direction.y) + sq(direction.z)); //distance from surface to light
    
    vec3 lightNormal = normalize(light.center.xyz - position); //center of the light - surface
    
    float diffuseCoefficient = max(0.0, dot(normal, lightNormal)); //max so it cannot be negative
    
    float attenuatedIntensity = 1.0 / (1.0 + dist / light.intensity + sq(dist) / sq(light.intensity)); //This makes the light less intense
    
    //Return diffuse light
    lightingIntensity = diffuseCoefficient * attenuatedIntensity;
}

//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

//Makes a wave effect
sCoord wave(in sCoord originalLocation) {
    sCoord defformedLocation;
    defformedLocation = vec2(sin(originalLocation.x) - iTime, originalLocation.y); //makes the waves in the image using sin
    return defformedLocation;
}

vec3 wave(in vec3 originalLocation) {
    vec3 defformedLocation;
    defformedLocation = vec3(sin(originalLocation.x), originalLocation.yz); //makes the waves in the image using sin
    return defformedLocation;
}

//Crossfade between 2 textures (cycle takes 2 seconds)
vec4 crossfade(in vec4 texture1, in vec4 texture2) {
    //This loops the effect
    float time = iTime; //gets the current time
    float timesRun = floor(time); //gets the number of times the full animation has completed
    time -= timesRun; //removes the times run from the total time
    //the final output of time is between 0.0 and 1.0
    
    //Fades back and forth
    if(int(timesRun) % 2 == 0) {
        return mix(texture1, texture2, time); //mixes the texture based off of the time
    }else{
        return mix(texture2, texture1, time); //mixes the textures based off of the time
    }
}

//returns rotation matrix
mat3 rotation(float degree) {
    mat3 rotation = mat3(cos(degree) , 0.0 , sin(degree),
         0.0         , 1.0 , 0.0,
         -sin(degree), 0.0 , cos(degree)
        );
    
    return rotation;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return vp.viewportPoint;
    
    
    //Texture
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res;
    loc = ratio * loc - vec2(iTime, 0.0); //Zoom / Shift
    
    loc = wave(loc); // wave effect
    
    vec4 texture0 = texture(iChannel0, loc); //texture from channel 0
    vec4 texture2 = texture(iChannel2, loc); //texture from channel 2
    
    vec4 returnColor = crossfade(texture0, texture2);
    
    //This creates the light
    pointLight light;
    initLight(light, vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0), 1.0);
    
    float lightIntensity;
    
    lightCalc(lightIntensity, light, vec3(0.0, 0.0, 1.0), vec3(0.0), vp.viewportPoint.xyz);
    
    returnColor *= (lightIntensity * light.color);
    
    //return returnColor;
    //return texture(iChannel0, loc).rrrr; //black and white
    
    //Cube Map
    vec3 cubeLoc = ray.direction.xyz;
    
    cubeLoc = rotation(iTime) * cubeLoc;
    
    cubeLoc = wave(cubeLoc);
    
    return texture(iChannel1, cubeLoc);
    
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
